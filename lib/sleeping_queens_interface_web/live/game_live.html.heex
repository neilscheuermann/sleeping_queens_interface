<h1 class="text-3xl text-center mt-4">Sleeping Queens</h1>
<!-- Banner -->
<.banner>
  <%= get_banner_text(assigns) %>
</.banner>
<!-- Board and other players -->
<div class="grid grid-cols-4 grid-rows-3 mt-2">
  <!-- Other players -->
  <%= for player <- @table.players, player.position != @user.position do %>
    <.player action_required?={action_required?(player, assigns)}>
      <span class="block text-center text-xl font-bold">
        <%= player.name %>
      </span>
      <div class="flex justify-evenly">
        <span><%= length(player.queens) %></span>
        <span class="font-bold"><%= get_score(player) %></span>
      </div>
    </.player>
  <% end %>
  <!-- Queens board -->
  <div class="col-start-2 col-end-4 row-start-1 row-end-3 flex justify-center">
    <div class={"grid grid-cols-4 gap-1 w-fit justify-center 
                #{(
                    should_select_queen?(@rules.waiting_on, @user) 
                    or should_place_queen_back_on_board?(@rules.waiting_on, @user)
                  ) 
                  and "bg-yellow-200"}
                "}>
      <%= for {{row, col}, queen} <- @table.queens_board do %>
        <%= if is_nil(queen) do %>
          <div
            class="w-10 h-16 border border-gray-700 border-dashed rounded"
            phx-click="put_queen_back"
            phx-value-row={row}
            phx-value-col={col}
          />
        <% else %>
          <div
            class="w-10 h-16 bg-teal-600 border border-gray-700 rounded"
            phx-click="select_queen"
            phx-value-row={row}
            phx-value-col={col}
          />
        <% end %>
      <% end %>
    </div>
  </div>
  <!-- Draw and discard piles -->
  <div
    :if={@rules.state != :initialized}
    class="flex justify-center gap-2 mt-4 col-start-2 col-end-4 row-start-3 row-end-last"
  >
    <div
      phx-click="draw_for_jester"
      class={"text-center text-xs w-16 h-24 bg-rose-500 border border-gray-700 shadow rounded overflow-hidden
              #{should_draw_for_jester?(@rules.waiting_on, @user) and "shadow-lg shadow-yellow-500"}
                "}
    >
      <span><%= length(@table.draw_pile) %> cards</span>
    </div>
    <div class="w-16 h-24 border border-dashed border-gray-700 shadow rounded overflow-hidden">
      <%= if top_discard(@table) do %>
        <.card card={top_discard(@table)} />
      <% else %>
        <span>Discard</span>
      <% end %>
    </div>
  </div>
</div>
<!-- My player and queens -->
<div class="flex">
  <!-- My player -->
  <%= for player <- get_player(@table, @user.position) |> List.wrap()  do %>
    <.player action_required?={action_required?(player, assigns)}>
      <div class="flex justify-evenly items-center">
        <span class="text-center text-lg font-bold"><%= player.name %></span>
        <span class="font-bold text-lg"><%= get_score(player) %></span>
      </div>
    </.player>
  <% end %>
  <!-- My queen cards -->
  <div class="h-24 grid grid-cols-6 px-2 mt-4">
    <%= for queen <- @table
                      |> get_player(@user.position)
                      |> Map.get(:queens) 
                      |> Enum.reverse() do %>
      <.queen_card queen={queen} />
    <% end %>
  </div>
</div>
<!-- My cards -->
<div class="grid grid-cols-5 px-2 mt-4">
  <%= for {card, idx} <- 
    @table
    |> get_player(@user.position)
    |> Map.get(:hand) 
    |> Enum.with_index() do %>
    <.card
      card={card}
      card_position={idx + 1}
      class={(idx + 1) in @selected_cards and "border-2 border-yellow-500"}
    />
  <% end %>
</div>
<!-- Start button -->
<div :if={@rules.state == :initialized and @user.position == 1} class="m-2">
  <.button class="w-full" phx-click="start_game">
    Start Game
  </.button>
</div>
<!-- Play and Discard buttons -->
<div :if={@rules.state == :playing} class="m-2 grid grid-cols-3 gap-2">
  <.button class="col-span-2" phx-click="play" disabled={!@can_play_selection?}>
    Play
  </.button>
  <.button phx-click="discard" disabled={!@can_discard_selection?}>
    Discard
  </.button>
</div>
<!-- Modal - Select Opponent's Queen -->
<!-- `block_exit` block the user from exiting using excape or clicking outside the modal. -->
<!-- The `:if` below is a hack to get the modal to open when the user plays a sleeping -->
<!-- potion or a knight. Not sure why it won't update with just `show={@should_select_opponent_queen?}`?  -->
<.modal
  :if={@should_select_opponent_queen?}
  block_exit={true}
  show={@should_select_opponent_queen?}
  id="select_opponent_queen_modal"
>
  <.header><%= get_action_text(@rules.waiting_on) %></.header>
  <%= for player <- @table.players, player.position != @user.position do %>
    <p><%= player.name %></p>
    <%= for {queen, idx} <- Enum.with_index(player.queens) do %>
      <.queen_card
        queen={queen}
        phx-click="select_opponent_queen"
        phx-value-opponent_position={player.position}
        phx-value-opponent_queen_position={idx + 1}
      />
    <% end %>
  <% end %>
</.modal>
<!-- Modal - Chose whether to block steal -->
<.modal
  :if={@maybe_protect_queen?}
  block_exit={true}
  show={@maybe_protect_queen?}
  id="maybe_block_queen_steal_modal"
>
  <.header><%= get_text_for_protect_queen_modal(@rules.waiting_on) %></.header>
  <.button phx-click="protect_queen" disabled={!@can_block_steal_queen?}>
    Yes
  </.button>
  <.button phx-click="lose_queen">No</.button>
</.modal>
<!-- Game over - modal -->
<.modal
  :if={@rules.state == :game_over}
  block_exit={true}
  show={@rules.state == :game_over}
  id="game_over"
>
  <.header><%= "Game over!! Anuzzzaaaaa????" %></.header>
  <.button phx-click="play_again" disabled={}>
    Play again
  </.button>
  <.button phx-click="navigate_home">Home</.button>
</.modal>
